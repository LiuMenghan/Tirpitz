'use strict';
/**
 * 继承
 */
var Fs = require('fs');
var Path = require('path');
var Util = require('../util.js');
exports = module.exports = function(args){
	return exports;
}

exports.processorName = "super";
exports.process = function(node, tplPath, parser, variables){
	
	
	var children = node.children;
	var replacer = {};
	for(var i = 0; i < children.length ; i++){
		var child = children[i];
		Util.traverseNodeTree(child, tplPath, function(node, superPath){
			if("override" == node.processorName){
				replacer[node.attribute.id] = node;
			}else if("super" == node.processorName){
				node.attribute.parent = Path.resolve(Path.dirname(tplPath), node.attribute.parent);
			}

		});
	}
	//console.log(replacer);
	
	//获取父模版
	var superPath = Path.resolve(Path.dirname(tplPath), node.attribute.parent);
	console.log(superPath);
	var superContext = Fs.readFileSync(superPath, parser.encoding);
	var superNode = parser.parse2node(superContext, superPath);
	
	Util.traverseNodeTree(superNode, superPath, function(node, superPath){
		if("super" == node.processorName){
			var relativePath = node.attribute.parent;
			//路径改为绝对路径，以解决多级嵌套的问题
			node.attribute.parent = Path.resolve(Path.dirname(superPath), relativePath);
		}else if(node.processorName == "replacable"){
			//替换
			if(undefined != replacer[node.attribute.id]){
				node.processorName = "";
				node.children = replacer[node.attribute.id].children;			
			}else{
				node.processorName = "";				
			}			
		}
	});
	//console.log(superNode.children);
	node.parentNode.children[node.parentIdx].children = superNode.children;
	node.parentNode.children[node.parentIdx].processorName = "";
}

